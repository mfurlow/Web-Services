//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eventual.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EventFinderDB_DEVEntities : DbContext
    {
        public EventFinderDB_DEVEntities()
            : base("name=EventFinderDB_DEVEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventRegistration> EventRegistrations { get; set; }
        public virtual DbSet<EventType> EventTypes { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<SavedEvent> SavedEvents { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<APP_SETTINGS> APP_SETTINGS { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spCreateEvent_Result> spCreateEvent(Nullable<System.DateTime> eventStartTime, Nullable<System.DateTime> eventEndTime, string eventTitle, Nullable<decimal> eventPrice, string eventDescription, string eventImageURL, string locationStreet1, string locationStreet2, string locationZipcode, string locationCity, string stateAbbreviation, string countryAbbreviation, string locationBuildingName)
        {
            var eventStartTimeParameter = eventStartTime.HasValue ?
                new ObjectParameter("EventStartTime", eventStartTime) :
                new ObjectParameter("EventStartTime", typeof(System.DateTime));
    
            var eventEndTimeParameter = eventEndTime.HasValue ?
                new ObjectParameter("EventEndTime", eventEndTime) :
                new ObjectParameter("EventEndTime", typeof(System.DateTime));
    
            var eventTitleParameter = eventTitle != null ?
                new ObjectParameter("EventTitle", eventTitle) :
                new ObjectParameter("EventTitle", typeof(string));
    
            var eventPriceParameter = eventPrice.HasValue ?
                new ObjectParameter("EventPrice", eventPrice) :
                new ObjectParameter("EventPrice", typeof(decimal));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("EventDescription", eventDescription) :
                new ObjectParameter("EventDescription", typeof(string));
    
            var eventImageURLParameter = eventImageURL != null ?
                new ObjectParameter("EventImageURL", eventImageURL) :
                new ObjectParameter("EventImageURL", typeof(string));
    
            var locationStreet1Parameter = locationStreet1 != null ?
                new ObjectParameter("LocationStreet1", locationStreet1) :
                new ObjectParameter("LocationStreet1", typeof(string));
    
            var locationStreet2Parameter = locationStreet2 != null ?
                new ObjectParameter("LocationStreet2", locationStreet2) :
                new ObjectParameter("LocationStreet2", typeof(string));
    
            var locationZipcodeParameter = locationZipcode != null ?
                new ObjectParameter("LocationZipcode", locationZipcode) :
                new ObjectParameter("LocationZipcode", typeof(string));
    
            var locationCityParameter = locationCity != null ?
                new ObjectParameter("LocationCity", locationCity) :
                new ObjectParameter("LocationCity", typeof(string));
    
            var stateAbbreviationParameter = stateAbbreviation != null ?
                new ObjectParameter("StateAbbreviation", stateAbbreviation) :
                new ObjectParameter("StateAbbreviation", typeof(string));
    
            var countryAbbreviationParameter = countryAbbreviation != null ?
                new ObjectParameter("CountryAbbreviation", countryAbbreviation) :
                new ObjectParameter("CountryAbbreviation", typeof(string));
    
            var locationBuildingNameParameter = locationBuildingName != null ?
                new ObjectParameter("LocationBuildingName", locationBuildingName) :
                new ObjectParameter("LocationBuildingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCreateEvent_Result>("spCreateEvent", eventStartTimeParameter, eventEndTimeParameter, eventTitleParameter, eventPriceParameter, eventDescriptionParameter, eventImageURLParameter, locationStreet1Parameter, locationStreet2Parameter, locationZipcodeParameter, locationCityParameter, stateAbbreviationParameter, countryAbbreviationParameter, locationBuildingNameParameter);
        }
    
        public virtual int spCreateLocation(string locationStreet1, string locationStreet2, string locationZipcode, string locationCity, string stateAbbreviation, string countryAbbreviation, string locationBuildingName, ObjectParameter locationID)
        {
            var locationStreet1Parameter = locationStreet1 != null ?
                new ObjectParameter("LocationStreet1", locationStreet1) :
                new ObjectParameter("LocationStreet1", typeof(string));
    
            var locationStreet2Parameter = locationStreet2 != null ?
                new ObjectParameter("LocationStreet2", locationStreet2) :
                new ObjectParameter("LocationStreet2", typeof(string));
    
            var locationZipcodeParameter = locationZipcode != null ?
                new ObjectParameter("LocationZipcode", locationZipcode) :
                new ObjectParameter("LocationZipcode", typeof(string));
    
            var locationCityParameter = locationCity != null ?
                new ObjectParameter("LocationCity", locationCity) :
                new ObjectParameter("LocationCity", typeof(string));
    
            var stateAbbreviationParameter = stateAbbreviation != null ?
                new ObjectParameter("StateAbbreviation", stateAbbreviation) :
                new ObjectParameter("StateAbbreviation", typeof(string));
    
            var countryAbbreviationParameter = countryAbbreviation != null ?
                new ObjectParameter("CountryAbbreviation", countryAbbreviation) :
                new ObjectParameter("CountryAbbreviation", typeof(string));
    
            var locationBuildingNameParameter = locationBuildingName != null ?
                new ObjectParameter("LocationBuildingName", locationBuildingName) :
                new ObjectParameter("LocationBuildingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateLocation", locationStreet1Parameter, locationStreet2Parameter, locationZipcodeParameter, locationCityParameter, stateAbbreviationParameter, countryAbbreviationParameter, locationBuildingNameParameter, locationID);
        }
    
        public virtual int spCreateUser(string userEmail, string userPassword)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("userPassword", userPassword) :
                new ObjectParameter("userPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateUser", userEmailParameter, userPasswordParameter);
        }
    
        public virtual int spDropEvent(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDropEvent", eventIDParameter);
        }
    
        public virtual int spDropRegisteredEventWithUserId(Nullable<int> userID, Nullable<int> eventID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDropRegisteredEventWithUserId", userIDParameter, eventIDParameter);
        }
    
        public virtual int spDropSavedEventWithUserID(Nullable<int> userID, Nullable<int> eventID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDropSavedEventWithUserID", userIDParameter, eventIDParameter);
        }
    
        public virtual int spDropUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDropUser", userIDParameter);
        }
    
        public virtual ObjectResult<string> spGetAllCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetAllCountries");
        }
    
        public virtual ObjectResult<spGetAllCurrentRegisteredEventsForSpecificUser_Result> spGetAllCurrentRegisteredEventsForSpecificUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCurrentRegisteredEventsForSpecificUser_Result>("spGetAllCurrentRegisteredEventsForSpecificUser", userIDParameter);
        }
    
        public virtual ObjectResult<spGetAllEventsWithEventTypes_Result> spGetAllEventsWithEventTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllEventsWithEventTypes_Result>("spGetAllEventsWithEventTypes");
        }
    
        public virtual int spGetAllEventsWithEventTypesForSpecificEvent(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAllEventsWithEventTypesForSpecificEvent", eventIdParameter);
        }
    
        public virtual ObjectResult<spGetAllPastRegisteredEventsForSpecificUser_Result> spGetAllPastRegisteredEventsForSpecificUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllPastRegisteredEventsForSpecificUser_Result>("spGetAllPastRegisteredEventsForSpecificUser", userIDParameter);
        }
    
        public virtual ObjectResult<spGetAllSavedEventsForSpecificUser_Result> spGetAllSavedEventsForSpecificUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllSavedEventsForSpecificUser_Result>("spGetAllSavedEventsForSpecificUser", userIDParameter);
        }
    
        public virtual ObjectResult<string> spGetAllStates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetAllStates");
        }
    
        public virtual ObjectResult<spGetAllUsers_Result> spGetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUsers_Result>("spGetAllUsers");
        }
    
        public virtual ObjectResult<string> spGetSALT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetSALT");
        }
    
        public virtual ObjectResult<spGetSpecificEventsWithEventTypes_Result> spGetSpecificEventsWithEventTypes(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSpecificEventsWithEventTypes_Result>("spGetSpecificEventsWithEventTypes", eventIdParameter);
        }
    
        public virtual ObjectResult<spGetSpecificUserWithUserEmail_Result> spGetSpecificUserWithUserEmail(string userEmail)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSpecificUserWithUserEmail_Result>("spGetSpecificUserWithUserEmail", userEmailParameter);
        }
    
        public virtual ObjectResult<spGetSpecificUserWithUserID_Result> spGetSpecificUserWithUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSpecificUserWithUserID_Result>("spGetSpecificUserWithUserID", userIDParameter);
        }
    
        public virtual int spJoinRegisteredEventUserId(Nullable<int> userID, Nullable<int> eventID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("eventID", eventID) :
                new ObjectParameter("eventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spJoinRegisteredEventUserId", userIDParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<spLoginUser_Result> spLoginUser(string userEmail, string userHashedPassword)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userHashedPasswordParameter = userHashedPassword != null ?
                new ObjectParameter("UserHashedPassword", userHashedPassword) :
                new ObjectParameter("UserHashedPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLoginUser_Result>("spLoginUser", userEmailParameter, userHashedPasswordParameter);
        }
    
        public virtual ObjectResult<string> spLookUpCountry(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spLookUpCountry", countryIDParameter);
        }
    
        public virtual ObjectResult<string> spLookUpState(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spLookUpState", stateIDParameter);
        }
    
        public virtual int spSaveEventUserId(Nullable<int> userID, Nullable<int> eventID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("eventID", eventID) :
                new ObjectParameter("eventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveEventUserId", userIDParameter, eventIDParameter);
        }
    
        public virtual int spSearchEvents(string keyword)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSearchEvents", keywordParameter);
        }
    
        public virtual ObjectResult<spUpdateUser_Result> spUpdateUser(string userFirstName, string userLastName, string userEmail, Nullable<System.DateTime> userBirthDate, string userPhoneNumber, string userHashedPassword, string userImageURL, Nullable<int> userID)
        {
            var userFirstNameParameter = userFirstName != null ?
                new ObjectParameter("UserFirstName", userFirstName) :
                new ObjectParameter("UserFirstName", typeof(string));
    
            var userLastNameParameter = userLastName != null ?
                new ObjectParameter("UserLastName", userLastName) :
                new ObjectParameter("UserLastName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userBirthDateParameter = userBirthDate.HasValue ?
                new ObjectParameter("UserBirthDate", userBirthDate) :
                new ObjectParameter("UserBirthDate", typeof(System.DateTime));
    
            var userPhoneNumberParameter = userPhoneNumber != null ?
                new ObjectParameter("UserPhoneNumber", userPhoneNumber) :
                new ObjectParameter("UserPhoneNumber", typeof(string));
    
            var userHashedPasswordParameter = userHashedPassword != null ?
                new ObjectParameter("UserHashedPassword", userHashedPassword) :
                new ObjectParameter("UserHashedPassword", typeof(string));
    
            var userImageURLParameter = userImageURL != null ?
                new ObjectParameter("UserImageURL", userImageURL) :
                new ObjectParameter("UserImageURL", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpdateUser_Result>("spUpdateUser", userFirstNameParameter, userLastNameParameter, userEmailParameter, userBirthDateParameter, userPhoneNumberParameter, userHashedPasswordParameter, userImageURLParameter, userIDParameter);
        }
    }
}
